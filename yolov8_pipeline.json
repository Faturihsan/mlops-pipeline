{
  "components": {
    "comp-download-dataset": {
      "executorLabel": "exec-download-dataset",
      "inputDefinitions": {
        "parameters": {
          "api_key": {
            "parameterType": "STRING"
          },
          "export_format": {
            "defaultValue": "yolov8",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project_name": {
            "parameterType": "STRING"
          },
          "version_number": {
            "parameterType": "NUMBER_INTEGER"
          },
          "workspace": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "Output": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-export-model": {
      "executorLabel": "exec-export-model",
      "inputDefinitions": {
        "parameters": {
          "export_format": {
            "defaultValue": "onnx",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_path": {
            "parameterType": "STRING"
          },
          "nms": {
            "defaultValue": true,
            "isOptional": true,
            "parameterType": "BOOLEAN"
          }
        }
      }
    },
    "comp-predict-model": {
      "executorLabel": "exec-predict-model",
      "inputDefinitions": {
        "parameters": {
          "conf": {
            "defaultValue": 0.25,
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "dataset_path": {
            "parameterType": "STRING"
          },
          "model_path": {
            "parameterType": "STRING"
          },
          "save": {
            "defaultValue": true,
            "isOptional": true,
            "parameterType": "BOOLEAN"
          }
        }
      }
    },
    "comp-train-model": {
      "executorLabel": "exec-train-model",
      "inputDefinitions": {
        "parameters": {
          "dataset_path": {
            "parameterType": "STRING"
          },
          "epochs": {
            "parameterType": "NUMBER_INTEGER"
          },
          "model_name": {
            "parameterType": "STRING"
          },
          "output_dir": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "Output": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-validate-model": {
      "executorLabel": "exec-validate-model",
      "inputDefinitions": {
        "parameters": {
          "dataset_path": {
            "parameterType": "STRING"
          },
          "model_path": {
            "parameterType": "STRING"
          }
        }
      }
    }
  },
  "deploymentSpec": {
    "executors": {
      "exec-download-dataset": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "download_dataset"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef download_dataset(\n    api_key: str,\n    workspace: str,\n    project_name: str,\n    version_number: int,\n    export_format: str = \"yolov8\"\n) -> str:\n    \"\"\"Downloads dataset via Roboflow and returns local folder path.\"\"\"\n    from roboflow import Roboflow\n    rf = Roboflow(api_key=api_key)\n    ds = rf.workspace(workspace).project(project_name).version(version_number)\n    folder = ds.download(export_format)\n    return folder.location\n\n"
          ],
          "image": "python:3.8"
        }
      },
      "exec-export-model": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "export_model"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef export_model(\n    model_path: str,\n    export_format: str = \"onnx\",\n    nms: bool = True\n):\n    \"\"\"Exports the trained model to ONNX (or other formats).\"\"\"\n    from ultralytics import YOLO\n    YOLO(model_path).export(format=export_format, nms=nms)\n\n"
          ],
          "image": "python:3.8"
        }
      },
      "exec-predict-model": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "predict_model"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef predict_model(\n    model_path: str,\n    dataset_path: str,\n    conf: float = 0.25,\n    save: bool = True\n):\n    \"\"\"Runs inference on test images.\"\"\"\n    from ultralytics import YOLO\n    source = os.path.join(dataset_path, \"test\", \"images\")\n    YOLO(model_path).predict(source=source, conf=conf, save=save)\n\n"
          ],
          "image": "python:3.8"
        }
      },
      "exec-train-model": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "train_model"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef train_model(\n    model_name: str,\n    dataset_path: str,\n    epochs: int,\n    output_dir: str\n) -> str:\n    \"\"\"Trains YOLOv8 and returns path to best.pt.\"\"\"\n    from ultralytics import YOLO\n    yaml = os.path.join(dataset_path, \"data.yaml\")\n    model = YOLO(model_name)\n    model.train(data=yaml, epochs=epochs, project=output_dir, plots=True)\n    return os.path.join(output_dir, \"runs\", \"detect\", \"train\", \"weights\", \"best.pt\")\n\n"
          ],
          "image": "python:3.8"
        }
      },
      "exec-validate-model": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "validate_model"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef validate_model(\n    model_path: str,\n    dataset_path: str\n):\n    \"\"\"Validates model on the dataset\u2019s validation split.\"\"\"\n    from ultralytics import YOLO\n    yaml = os.path.join(dataset_path, \"data.yaml\")\n    YOLO(model_path).val(data=yaml)\n\n"
          ],
          "image": "python:3.8"
        }
      }
    }
  },
  "pipelineInfo": {
    "name": "yolov8-object-detection-pipeline"
  },
  "root": {
    "dag": {
      "tasks": {
        "download-dataset": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-download-dataset"
          },
          "inputs": {
            "parameters": {
              "api_key": {
                "componentInputParameter": "api_key"
              },
              "project_name": {
                "componentInputParameter": "project_name"
              },
              "version_number": {
                "componentInputParameter": "version_number"
              },
              "workspace": {
                "componentInputParameter": "workspace"
              }
            }
          },
          "taskInfo": {
            "name": "download-dataset"
          }
        },
        "export-model": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-export-model"
          },
          "dependentTasks": [
            "train-model"
          ],
          "inputs": {
            "parameters": {
              "model_path": {
                "taskOutputParameter": {
                  "outputParameterKey": "Output",
                  "producerTask": "train-model"
                }
              }
            }
          },
          "taskInfo": {
            "name": "export-model"
          }
        },
        "predict-model": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-predict-model"
          },
          "dependentTasks": [
            "download-dataset",
            "train-model"
          ],
          "inputs": {
            "parameters": {
              "dataset_path": {
                "taskOutputParameter": {
                  "outputParameterKey": "Output",
                  "producerTask": "download-dataset"
                }
              },
              "model_path": {
                "taskOutputParameter": {
                  "outputParameterKey": "Output",
                  "producerTask": "train-model"
                }
              }
            }
          },
          "taskInfo": {
            "name": "predict-model"
          }
        },
        "train-model": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-train-model"
          },
          "dependentTasks": [
            "download-dataset"
          ],
          "inputs": {
            "parameters": {
              "dataset_path": {
                "taskOutputParameter": {
                  "outputParameterKey": "Output",
                  "producerTask": "download-dataset"
                }
              },
              "epochs": {
                "componentInputParameter": "epochs"
              },
              "model_name": {
                "componentInputParameter": "model_name"
              },
              "output_dir": {
                "componentInputParameter": "output_dir"
              }
            }
          },
          "taskInfo": {
            "name": "train-model"
          }
        },
        "validate-model": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-validate-model"
          },
          "dependentTasks": [
            "download-dataset",
            "train-model"
          ],
          "inputs": {
            "parameters": {
              "dataset_path": {
                "taskOutputParameter": {
                  "outputParameterKey": "Output",
                  "producerTask": "download-dataset"
                }
              },
              "model_path": {
                "taskOutputParameter": {
                  "outputParameterKey": "Output",
                  "producerTask": "train-model"
                }
              }
            }
          },
          "taskInfo": {
            "name": "validate-model"
          }
        }
      }
    },
    "inputDefinitions": {
      "parameters": {
        "api_key": {
          "defaultValue": "Ta6oCmhCi264c7zHQyZM",
          "isOptional": true,
          "parameterType": "STRING"
        },
        "epochs": {
          "defaultValue": 10.0,
          "isOptional": true,
          "parameterType": "NUMBER_INTEGER"
        },
        "model_name": {
          "defaultValue": "yolov8s.pt",
          "isOptional": true,
          "parameterType": "STRING"
        },
        "output_dir": {
          "defaultValue": "/mnt/data/output",
          "isOptional": true,
          "parameterType": "STRING"
        },
        "project_name": {
          "defaultValue": "student-and-non-student",
          "isOptional": true,
          "parameterType": "STRING"
        },
        "version_number": {
          "defaultValue": 1.0,
          "isOptional": true,
          "parameterType": "NUMBER_INTEGER"
        },
        "workspace": {
          "defaultValue": "zx-r6lu6",
          "isOptional": true,
          "parameterType": "STRING"
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.9.0"
}